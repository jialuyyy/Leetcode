//beats 63.48%
//use an array to mark each solution
//index -> row
//value -> col
//for each row, iterate over the column to check if the (row, col) is valid, place the queen on the board; otherwise check
//the next col
public class Solution {
    public static int sum;
    public int totalNQueens(int n) {
        sum = 0;
        int[] usedColumns = new int[n];
        helper(usedColumns, 0);
        return sum;
    }
    public void helper(int[] usedColumns, int row) {
        int n = usedColumns.length;
        
        if (row == n) {
            sum ++;
            return;
        }
        
        for (int i = 0; i < n; i++) {
            if (isValid(usedColumns, row, i)) {
                usedColumns[row] = i;
                helper(usedColumns, row + 1);
            }
        }
    }

    
    
    public boolean isValid(int[] usedColumns, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (usedColumns[i] == col) {
                return false;
            }
            if ((row - i) == Math.abs(col-usedColumns[i])) {
                return false;
            }
        }
        return true;
    }

}
