/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class SubtreeWithAllDeepest {
    private Map<TreeNode, Integer> depth = new HashMap<>();
    private int maxDepth = 0;
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        if (root == null)
            return null;
        
        depth.put(null, -1);
        dfs(root, null);
        
        //get the maxDepth
        for (int d : depth.values()) {
            maxDepth = Math.max(maxDepth, d);
        }
        
        return getAnswer(root);
    }
    
    private TreeNode getAnswer(TreeNode node) {
        if (node == null || depth.get(node) == maxDepth) {
            return node;
        }
        
        TreeNode left = getAnswer(node.left);
        TreeNode right = getAnswer(node.right);
        
        if (left != null && right != null)
            return node;
        
        if (left != null)
            return left;
        
        if (right != null)
            return right;
        
        return null;
        
    }
    
    private void dfs(TreeNode root, TreeNode parent) {
        if (root != null) {
            depth.put(root, depth.get(parent) + 1);
            dfs(root.left, root);
            dfs(root.right, root);
        }
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class SubtreeWithAllDeepest {
    class ResultType {
        TreeNode node;
        int depth;
        
        public ResultType(TreeNode node, int depth) {
            this.node = node;
            this.depth = depth;
        }
    }
    
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        return dfs(root).node;
    }
    
    private ResultType dfs(TreeNode root) {
        if (root == null) {
            return new ResultType(null, 0);
        }
        
        ResultType left = dfs(root.left);
        ResultType right = dfs(root.right);
        
        if (left.depth > right.depth) {
            return new ResultType(left.node, left.depth + 1);
        }
        
        if (right.depth > left.depth) {
            return new ResultType(right.node, right.depth + 1);
        }
        
        return new ResultType(root, right.depth + 1);
    }
}
